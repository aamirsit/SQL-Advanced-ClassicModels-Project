USE CLASSICMODELS;

-- TASK 1: Find the top 10 customers who have placed the most orders. Display customer name and the count of orders placed.

SELECT 
	CUSTOMERNAME, 
    COUNT(ORDERNUMBER) as TOTAL_ORDERS_PLACED
FROM CUSTOMERS C JOIN ORDERS O USING(CUSTOMERNUMBER)
WHERE STATUS <> 'CANCELLED'
GROUP BY CUSTOMERNUMBER
ORDER BY TOTAL_ORDERS_PLACED DESC
LIMIT 10;

-- TASK 2: Retrieve the list of customers who have placed orders but haven't made any payments yet. 

SELECT DISTINCT CUSTOMERNUMBER, CUSTOMERNAME 
FROM ORDERS JOIN CUSTOMERS USING(CUSTOMERNUMBER)
WHERE
	STATUS <> 'CANCELLED' AND 
	CUSTOMERNUMBER NOT IN (SELECT DISTINCT CUSTOMERNUMBER FROM PAYMENTS);

-- TASK 3: Retrieve a product that has been ordered the least number of times. 
-- 	   	   Display the product code, product name, and the number of times it has been ordered.

WITH CTE AS(
SELECT 
	PRODUCTCODE,
    PRODUCTNAME,
    COUNT(*) AS NUMBER_OF_TIMES_ORDERED,
	DENSE_RANK() OVER(ORDER BY COUNT(*)) AS LEASTORDERS
FROM ORDERS JOIN ORDERDETAILS USING(ORDERNUMBER) JOIN PRODUCTS USING(PRODUCTCODE)
WHERE STATUS <> 'CANCELLED'
GROUP BY 1 
ORDER BY 3)

SELECT PRODUCTCODE, PRODUCTNAME, NUMBER_OF_TIMES_ORDERED
FROM CTE 
WHERE LEASTORDERS = 1;

-- TASK 4: Classic Models has a product line called "Vintage Cars." 
-- The management wants to know the total revenue generated by this product line in the last quarter of the year 2003 (from October to December). 
-- Write a MySQL stored procedure that takes no input parameters and returns total revenue of the "Vintage Cars" 
-- product line for the last quarter of 2003.

DELIMITER $$
CREATE PROCEDURE GetTotalRevenueOfVintageCars2003Q4()
BEGIN
	SELECT 
		PRODUCTLINE, 
        SUM(QUANTITYORDERED * PRICEEACH) as TOTAL_REVENUE
	FROM PRODUCTS
		JOIN ORDERDETAILS USING(PRODUCTCODE)
		JOIN ORDERS USING(ORDERNUMBER)
	WHERE PRODUCTLINE = 'Vintage Cars' AND YEAR(ORDERDATE) = 2003 AND QUARTER(ORDERDATE) = 4 AND STATUS <> 'CANCELLED'
	GROUP BY PRODUCTLINE;
END $$
DELIMITER ;
CALL GetTotalRevenueOfVintageCars2003Q4();

-- TASK 5: Write an SQL query using CTE's and window functions inside it to retrieve the top 5 customers 
-- 		   along with their total order values across all orders.

WITH CTE AS (
SELECT 
    C.CUSTOMERNUMBER,
	C.CUSTOMERNAME, 
	SUM(OD.QUANTITYORDERED * OD.PRICEEACH) as TOTAL_ORDER_VALUE,
    DENSE_RANK() OVER(ORDER BY SUM(OD.QUANTITYORDERED * OD.PRICEEACH) DESC) AS RANKING
FROM ORDERDETAILS OD 
	JOIN ORDERS O USING(ORDERNUMBER)
    JOIN CUSTOMERS C USING(CUSTOMERNUMBER)
WHERE STATUS <> 'CANCELLED'
GROUP BY C.CUSTOMERNUMBER
ORDER BY TOTAL_ORDER_VALUE DESC )

SELECT 
	CUSTOMERNUMBER,
	CUSTOMERNAME, 
	TOTAL_ORDER_VALUE
FROM CTE
WHERE RANKING <= 5;